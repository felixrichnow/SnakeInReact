{"ast":null,"code":"var _jsxFileName = \"/Users/felixrichnau/Documents/Snake/react-snake-starter-files/react-snake-START-HERE/src/App.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useInterval } from './useInterval';\nimport { CANVAS_SIZE, SNAKE_START, APPLE_START, SCALE, SPEED, DIRECTIONS } from './constants';\n\nconst App = () => {\n  const canvasRef = useRef(null);\n  const [snake, setSnake] = useState(SNAKE_START);\n  const [apple, setApple] = useState(APPLE_START);\n  const [dir, setDir] = useState([0, -1]);\n  const [speed, setSpeed] = useState(null);\n  const [gameOver, setGameover] = useState(false);\n  let counter;\n\n  const startGame = () => {\n    counter = 0;\n    setSnake(SNAKE_START);\n    setApple(APPLE_START);\n    setDir([0, -1]);\n    setSpeed(SPEED);\n    setGameover(false);\n  };\n\n  const endGame = () => {\n    setSpeed(null);\n    setGameover(true);\n  };\n\n  const moveSnake = ({\n    keyCode\n  }) => keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\n\n  const createApple = () => {\n    apple.map((_, i) => Math.floor(Math.random() * (CANVAS_SIZE[i] / SCALE)));\n  };\n\n  const checkCollision = (piece, snk = snake) => {\n    if (piece[0] * SCALE >= CANVAS_SIZE[0] || piece[0] < 0 || piece[1] * SCALE >= CANVAS_SIZE[1] || piece[1] < 0) return true;\n\n    for (const segment of snk) {\n      if (piece[0] === segment[0] && piece[1] === segment[1]) return true;\n    }\n\n    return false;\n  };\n\n  const checkAppleCollision = newSnake => {\n    if (newSnake[0][0] === apple[0] && newSnake[0][1] === apple[1]) {\n      let newApple = createApple();\n\n      while (checkCollision(newApple, newSnake)) {\n        counter = counter + 1;\n        newApple = createApple();\n      }\n\n      setApple(newApple);\n      return true;\n    }\n\n    return false;\n  };\n\n  const gameLoop = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\n    snakeCopy.unshift(newSnakeHead);\n    if (checkCollision(newSnakeHead)) endGame();\n    if (!checkAppleCollision(snakeCopy)) snakeCopy.pop();\n    setSnake(snakeCopy);\n  };\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\n    context.clearRect(0, 0, CANVAS_SIZE[0], CANVAS_SIZE[1]);\n    context.fillStyle = \"pink\";\n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n    context.fillStyle = \"green\";\n    context.fillRect(apple[0], apple[1], 1, 1);\n  }, [snake, apple, gameOver]);\n  useInterval(() => gameLoop(), speed);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => moveSnake(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    style: {\n      border: \"1px solid black\"\n    },\n    ref: canvasRef,\n    width: `${CANVAS_SIZE[0]}px`,\n    height: `${CANVAS_SIZE[1]}px`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }), gameOver && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 15\n    }\n  }, \"GAME OVER! \"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 3\n    }\n  }, \"Start Game\"));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/felixrichnau/Documents/Snake/react-snake-starter-files/react-snake-START-HERE/src/App.js"],"names":["React","useState","useRef","useEffect","useInterval","CANVAS_SIZE","SNAKE_START","APPLE_START","SCALE","SPEED","DIRECTIONS","App","canvasRef","snake","setSnake","apple","setApple","dir","setDir","speed","setSpeed","gameOver","setGameover","counter","startGame","endGame","moveSnake","keyCode","createApple","map","_","i","Math","floor","random","checkCollision","piece","snk","segment","checkAppleCollision","newSnake","newApple","gameLoop","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","pop","context","current","getContext","setTransform","clearRect","fillStyle","forEach","x","y","fillRect","e","border"],"mappings":"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","sourcesContent":["import React, {useState, useRef, useEffect} from \"react\";\nimport {useInterval} from './useInterval';\nimport {\n    CANVAS_SIZE,\n    SNAKE_START,\n    APPLE_START,\n    SCALE,\n    SPEED,\n    DIRECTIONS\n} from './constants';\n\nconst App = () => {\n const canvasRef = useRef(null);\n const [snake, setSnake] = useState(SNAKE_START);\n const [apple, setApple] = useState(APPLE_START);\n const [dir, setDir] = useState([0,-1]);\n const[speed, setSpeed] = useState(null);\n const[gameOver, setGameover] = useState(false);\n let counter;\n\n\n    const startGame = () => {\n            counter = 0;\n            setSnake(SNAKE_START);\n            setApple(APPLE_START);\n            setDir( [0,-1]);\n            setSpeed(SPEED);\n            setGameover(false);\n    }\n\n    const endGame = () => {\n        setSpeed(null);\n        setGameover(true);\n    }\n\n    const moveSnake = ( {keyCode } ) => keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\n\n\n    const createApple = () => {\n        apple.map((_, i) => Math.floor(Math.random() * (CANVAS_SIZE[i] / SCALE)) ) ;\n    }\n\n    const checkCollision = (piece, snk = snake) => {\n        if(\n            piece[0] * SCALE >= CANVAS_SIZE[0] ||\n            piece[0] < 0 ||\n            piece[1] * SCALE >= CANVAS_SIZE[1] ||\n            piece[1] < 0\n        )\n        return true;\n\n      for ( const segment of snk) {\n          if (piece[0] === segment[0] && piece[1] === segment[1]) return true;\n      }  \n    return false;\n    }\n\n    const checkAppleCollision = newSnake => {\n     if( newSnake[0][0] === apple[0] && newSnake[0][1] === apple[1])  {\n         let newApple = createApple();\n         while(checkCollision(newApple, newSnake)) {\n            counter = counter + 1; \n            newApple = createApple();\n         }\n         setApple(newApple);\n         return true;\n     }\n     return false;\n    }\n\n    const gameLoop = () => {\n        const snakeCopy = JSON.parse(JSON.stringify(snake));\n        const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1] ];\n        snakeCopy.unshift(newSnakeHead);\n        if( checkCollision(newSnakeHead)) endGame();\n        if(!checkAppleCollision(snakeCopy)) snakeCopy.pop();\n        setSnake(snakeCopy);\n    }\n\n    useEffect( () => {\n        const context = canvasRef.current.getContext(\"2d\");\n        context.setTransform(SCALE, 0 , 0, SCALE, 0, 0);\n        context.clearRect(0, 0, CANVAS_SIZE[0], CANVAS_SIZE[1]);\n        context.fillStyle = \"pink\";\n        snake.forEach( ([x,y]) => context.fillRect(x,y, 1, 1) );\n        context.fillStyle = \"green\";\n        context.fillRect(apple[0], apple[1], 1 , 1);\n    }, [snake,apple, gameOver])\n\n    useInterval( () => gameLoop(), speed);\n\n    return(\n    <div role=\"button\" tabIndex=\"0\" onKeyDown={e => moveSnake(e)}>\n        <canvas style={ { border: \"1px solid black\" } }\n        ref={canvasRef}\n        width={`${CANVAS_SIZE[0]}px`}\n        height={`${CANVAS_SIZE[1]}px`}\n        />\n {gameOver && <div>GAME OVER! </div>}\n  <button onClick={startGame}>Start Game</button>\n  </div>\n )\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}