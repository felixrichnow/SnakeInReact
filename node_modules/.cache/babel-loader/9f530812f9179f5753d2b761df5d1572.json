{"ast":null,"code":"var _jsxFileName = \"/Users/felixrichnau/Documents/Snake/react-snake-starter-files/react-snake-START-HERE/src/App.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useInterval } from './useInterval';\nimport { CANVAS_SIZE, SNAKE_START, APPLE_START, SCALE, SPEED, DIRECTIONS } from './constants';\n\nconst App = () => {\n  const canvasRef = useRef(null);\n  const [snake, setSnake] = useState(SNAKE_START);\n  const [apple, setApple] = useState(APPLE_START);\n  const [dir, setDir] = useState([0, -1]);\n  const [speed, setSpeed] = useState(100);\n  const [gameOver, setGameover] = useState(false);\n\n  const startGame = () => {};\n\n  const endGame = () => {};\n\n  const moveSnake = ({\n    keyCode\n  }) => keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\n\n  const createApple = () => {};\n\n  const checkCollision = () => {};\n\n  const checkAppleCollision = () => {};\n\n  const gameLoop = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\n    snakeCopy.unshift(newSnakeHead);\n    snakeCopy.pop();\n    setSnake(snakeCopy);\n  };\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\n    context.clearRect(0, 0, CANVAS_SIZE[0], CANVAS_SIZE[1]);\n    context.fillStyle = \"pink\";\n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n    context.fillStyle = \"green\";\n    context.fillRect(apple[0], apple[1], 1, 1);\n  }, [snake, apple, gameOver]);\n  useInterval(() => gameLoop(), speed);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => moveSnake(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    style: {\n      border: \"1px solid black\"\n    },\n    ref: canvasRef,\n    width: `${CANVAS_SIZE[0]}px`,\n    height: `${CANVAS_SIZE[1]}px`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }), gameOver && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  }, \"GAME OVER!\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 3\n    }\n  }, \"Start Game\"));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/felixrichnau/Documents/Snake/react-snake-starter-files/react-snake-START-HERE/src/App.js"],"names":["React","useState","useRef","useEffect","useInterval","CANVAS_SIZE","SNAKE_START","APPLE_START","SCALE","SPEED","DIRECTIONS","App","canvasRef","snake","setSnake","apple","setApple","dir","setDir","speed","setSpeed","gameOver","setGameover","startGame","endGame","moveSnake","keyCode","createApple","checkCollision","checkAppleCollision","gameLoop","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","pop","context","current","getContext","setTransform","clearRect","fillStyle","forEach","x","y","fillRect","e","border"],"mappings":"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","sourcesContent":["import React, {useState, useRef, useEffect} from \"react\";\nimport {useInterval} from './useInterval';\nimport {\n    CANVAS_SIZE,\n    SNAKE_START,\n    APPLE_START,\n    SCALE,\n    SPEED,\n    DIRECTIONS\n} from './constants';\n\n\nconst App = () => {\n const canvasRef = useRef(null);\n const [snake, setSnake] = useState(SNAKE_START);\n const [apple, setApple] = useState(APPLE_START);\n const [dir, setDir] = useState([0,-1]);\n const[speed, setSpeed] = useState(100);\n const[gameOver, setGameover] = useState(false);\n\n    const startGame = () => {\n\n    }\n\n    const endGame = () => {\n\n    }\n\n    const moveSnake = ( {keyCode } ) => keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\n\n\n    const createApple = () => {\n\n    }\n\n    const checkCollision = () => {\n\n    }\n\n    const checkAppleCollision = () => {\n\n    }\n\n    const gameLoop = () => {\n        const snakeCopy = JSON.parse(JSON.stringify(snake));\n        const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1] ];\n        snakeCopy.unshift(newSnakeHead);\n        snakeCopy.pop();\n        setSnake(snakeCopy);\n    }\n\n    useEffect( () => {\n        const context = canvasRef.current.getContext(\"2d\");\n        context.setTransform(SCALE, 0 , 0, SCALE, 0, 0);\n        context.clearRect(0, 0, CANVAS_SIZE[0], CANVAS_SIZE[1]);\n        context.fillStyle = \"pink\";\n        snake.forEach( ([x,y]) => context.fillRect(x,y, 1, 1) );\n        context.fillStyle = \"green\";\n        context.fillRect(apple[0], apple[1], 1 , 1);\n    }, [snake,apple, gameOver])\n\n    useInterval( () => gameLoop(), speed);\n\n    return(\n    <div role=\"button\" tabIndex=\"0\" onKeyDown={e => moveSnake(e)}>\n        <canvas style={ { border: \"1px solid black\" } }\n        ref={canvasRef}\n        width={`${CANVAS_SIZE[0]}px`}\n        height={`${CANVAS_SIZE[1]}px`}\n        />\n {gameOver && <div>GAME OVER!</div>}\n  <button onClick={startGame}>Start Game</button>\n  </div>\n )\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}